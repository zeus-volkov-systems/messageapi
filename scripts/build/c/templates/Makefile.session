### This Makefile can be used as a template for writing programs that use that use the MessageAPI session shared library.
# Note that the goal of this makefile is to provide a template that can produce C/C++ programs (not shared libraries). It will 
# provide access to the MessageAPI shared library during build.
# Note that this library does not package the messageapi .so or .so dependencies of the MessageAPI lib (libjli and libjvm).
# When DEPLOYING a program that uses the MessageAPI library to a new system, either the LD_LIBRARY_PATH environment variable should be set/exported with the
# locations of libjli.so, libjvm.so, and libmessageapi.so, or they should be installed to the standard location for libs (if root).
# For the purposes of this build (on the build system), if MessageAPI was installed,
# the LD_LIBRARY_PATH should already be set in the users .bashrc. If there is an issue
# with linking, please contact the MessageAPI maintainers for assistance.

# The majority of this Makefile is standard, with only 4 user specified variables. These are denoted by the comment USER SPECIFIED.
# All user specified variables are at the top of this makefile. The build process is standardized to automatically include MessageAPI resources,
# So if there is an issue at first, make sure you have installed the library correctly (need $MESSAGEAPI_LIBS and $MESSAGEAPI_HEADERS env vars).

# There are a few other system-specific requirements and other notable things to keep in mind when using this Makefile:
## 1. You must have a JDK installed (not JRE). Building something with messageapi also requires the jni.h and jnimd.h headers included in your jdk.
## 2. JAVA_HOME must be set to your JDK home directory (one level above the java binary). This Makefile references JAVA_HOME in looking for jni.h and jnimd.h


#USER SPECIFIED: Enter the name of your program binary (e.g., MySession.bin)
PROGRAM_NAME=


#USER SPECIFIED: Enter the name of the build dir. The project will be built in 
BUILD_DIR=

#USER SPECIFIED: Enter the fully qualified paths of your source files and header files here:
SRC_FILES=
H_FILES=


########################## Everything below here is fairly standardized. Usually no need to adjust below unless there is an issue.############
COMPILE_DIR=$(BUILD_DIR)/compile#.o files and program binary produced here
HEADER_DIR=$(BUILD_DIR)/headers#.h files copied here before build (for central include path)
DEPS_DIR=$(BUILD_DIR)/deps#copy the messageapi lib here before build.

#The following represent directories for JNI Libraries that must be included during C and CPP compilation.
#The following represent a standard RHEL 7/8 system with OpenJDK.
JNIDIR=$(JAVA_HOME)/include
JNIMDDIR=$(JAVA_HOME)/include/linux

#compilers
CC=gcc

all: check_sys prep copy-shared build

.PHONY : check_sys prep copy-shared build clean

check_sys:
	@echo "Checking OS type"
ifneq ($(shell uname),Linux)
	@echo "This makefile is for building shared libraries on linux, OS is $(shell uname). Terminating."
	@exit 1
endif
	@echo "System OS is Linux, continuing build."

prep:
	@echo "Preparing system for build."
	@rm -rf $(BUILD_DIR)
	@mkdir -p $(BUILD_DIR)
	@mkdir -p $(COMPILE_DIR)
	@mkdir -p $(HEADER_DIR)
	@mkdir -p $(DEPS_DIR)
	@echo "Finished preparing system for build."

copy-shared:
	@echo "Extracting and copying production artifacts as shared resources for build."
	@cp $(MESSAGEAPI_LIBS)/* $(DEPS_DIR)
	@cp $(H_FILES) $(HEADER_DIR)
	@echo "Finished copying resources."


build:
	@echo "Building $(PROGRAM_NAME) in $(COMPILE_DIR)"
	@echo "Compiling C and/or C++ object files with position independent code."
	@-cd $(COMPILE_DIR) && $(CC) -fPIC -std=c99 -I$(MESSAGEAPI_HEADERS) -I$(HEADER_DIR) -I$(JNIDIR) -I$(JNIMDDIR) -L$(DEPS_DIR) -Wl,-rpath,$(DEPS_DIR) -lmessageapi $(SRC_FILES) -o $(PROGRAM_NAME)
	@echo "Completed build of $(COMPILE_DIR)/$(PROGRAM_NAME)."

clean:
	@echo "Cleaning up build refuse."
	@rm -rf $(BUILD_DIR)
	@echo "Finished cleaning up build refuse."